tosca_definitions_version: tosca_simple_yaml_1_0



description: >

  TOSCA simple profile with a single Block Storage node shared by 2-Tier Application with custom AttachesTo Type and explicit Relationship Templates.

node_types:
  tosca.nodes.Root:
    description: >
      The TOSCA root node all other TOSCA base node types derive from.
    properties:
      tosca_id:
        description: >
          A unique identifier of the realized instance of a Node Template
          that derives from any TOSCA normative type.
        type: string
        required: false
      tosca_name:
        description: >
          This attribute reflects the name of the Node Template as
          defined in the TOSCA service template.
        type: string
        required: false
      state:
        description: >
          The state of the node instance. See section “Node States” for allowed values.
        type: string
        required: false
    capabilities:
      feature:
        type: tosca.capabilities.Node
    requirements:
      - dependency:
          capability: tosca.capabilities.Node
          node: tosca.nodes.Root
          relationship: tosca.relationships.DependsOn
          occurrences: [ 0, UNBOUNDED ]
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
      Prepare:
        type: tosca.interfaces.node.Prepare

  tosca.nodes.Compute:
    description: >
      The TOSCA Compute node represents one or more real or virtual processors of software applications or services
      along with other essential local resources.
    derived_from: tosca.nodes.Root
    properties:
      meta:
        type: string
        required: false
      private_address:
        type: string
        required: false
      public_address:
        type: string
        required: false
      networks:
        type: map
        entry_schema:
          type: tosca.datatypes.network.NetworkInfo
        required: false
      ports:
        type: map
        entry_schema:
          type: tosca.datatypes.network.PortInfo
        required: false
    capabilities:
        host:
           type: tosca.capabilities.Container
           valid_source_types: [tosca.nodes.SoftwareComponent]
        endpoint:
           type: tosca.capabilities.Endpoint.Admin
        os:
           type: tosca.capabilities.OperatingSystem
        scalable:
           type: tosca.capabilities.Scalable
        binding:
           type: tosca.capabilities.network.Bindable
    requirements:
      - local_storage:
          capability: tosca.capabilities.Attachment
          node: tosca.nodes.BlockStorage
          relationship: tosca.relationships.AttachesTo
          occurrences: [0, UNBOUNDED]

  tosca.nodes.SoftwareComponent:
    description: >
      The TOSCA SoftwareComponent node represents a generic software component that can be managed and run
      by a TOSCA Compute Node Type.
    derived_from: tosca.nodes.Root
    properties:
      # domain-specific software component version
      component_version:
        type: version
        required: false
        description: >
          Software component version.
      admin_credential:
        type: tosca.datatypes.Credential
        required: false
    requirements:
      - host:
          capability: tosca.capabilities.Container
          node: tosca.nodes.Compute
          relationship: tosca.relationships.HostedOn

  tosca.nodes.WebServer:
    description: >
      This TOSCA WebServer Node Type represents an abstract software component or service that is capable of
      hosting and providing management operations for one or more WebApplication nodes
    derived_from: tosca.nodes.SoftwareComponent
    capabilities:
      data_endpoint:
        type: tosca.capabilities.Endpoint
      admin_endpoint:
        type: tosca.capabilities.Endpoint.Admin
      host:
        type: tosca.capabilities.Container
        valid_source_types: [tosca.nodes.WebApplication]

  tosca.nodes.WebApplication:
    description: >
      The TOSCA WebApplication node represents a software application that can be managed and run by a TOSCA
      WebServer node.
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      context_root:
        type: string
        required: false
    requirements:
      - host:
          capability: tosca.capabilities.Container
          node: tosca.nodes.WebServer
          relationship: tosca.relationships.HostedOn
    capabilities:
      app_endpoint:
        type: tosca.capabilities.Endpoint

  tosca.nodes.DBMS:
    description: >
      The TOSCA DBMS node represents a typical relational, SQL Database Management System software component
      or service.
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      port:
        required: false
        type: integer
        description: >
          The port the DBMS service will listen to for data and requests.
      root_password:
        required: false
        type: string
        description: >
          The root password for the DBMS service.
    capabilities:
      host:
        type: tosca.capabilities.Container
        valid_source_types: [tosca.nodes.Database]

  tosca.nodes.Database:
    description: >
      The TOSCA Database node represents a logical database that can be managed and hosted by a TOSCA DBMS
      node.
    derived_from: tosca.nodes.Root
    properties:
      user:
        required: false
        type: string
        description: >
          User account name for DB administration
      port:
        required: false
        type: integer
        description:  >
          The port the database service will use to listen for incoming data and
          requests.
      name:
        required: true
        type: string
        description: >
          The logical name of the database.
      password:
        required: false
        type: string
        description: >
          The password for the DB user account
    requirements:
      - host:
          capability: tosca.capabilities.Container
          node: tosca.nodes.DBMS
          relationship: tosca.relationships.HostedOn
    capabilities:
      database_endpoint:
        type: tosca.capabilities.Endpoint.Database

  tosca.nodes.BlockStorage:
    description: >
      The TOSCA BlockStorage node currently represents a server-local block storage device (i.e., not shared)
      offering evenly sized blocks of data from which raw storage volumes can be created.
    derived_from: tosca.nodes.Root
    properties:
      size:
        type: scalar-unit.size
        constraints:
          - greater_or_equal: 1 MB
      volume_id:
        type: string
        required: false
      snapshot_id:
        type: string
        required: false
    capabilities:
      attachment:
        type: tosca.capabilities.Attachment

capability_types:
  tosca.capabilities.Root:
    description: >
      The TOSCA root Capability Type all other TOSCA base Capability Types
      derive from.
  tosca.capabilities.Node:
    description: The Node capability indicates the base capabilities of a TOSCA Node Type.
    derived_from: tosca.capabilities.Root

  tosca.capabilities.Container:
    description: >
      The Container capability, when included on a Node Type or Template definition, indicates that the node can act
      as a container for (or a host for) one or more other declared Node Types.
    derived_from: tosca.capabilities.Root
    properties:
      num_cpus:
        required: false
        type: integer
        constraints:
          - greater_or_equal: 1
      cpu_frequency:
        required: false
        type: scalar-unit.frequency
        constraints:
          - greater_or_equal: 0.1 GHz
      disk_size:
        required: false
        type: scalar-unit.size
        constraints:
          - greater_or_equal: 0 MB
      mem_size:
        required: false
        type: scalar-unit.size
        constraints:
          - greater_or_equal: 0 MB

  tosca.capabilities.Endpoint:
    description: >
      This is the default TOSCA type that should be used or extended to define a network endpoint capability. This
      includes the information to express a basic endpoint with a single port or a complex endpoint with multiple
      ports. By default the Endpoint is assumed to represent an address on a private network unless otherwise
      specified.
    derived_from: tosca.capabilities.Root
    properties:
      protocol:
        type: string
        required: true
        default: tcp
      port:
        type: tosca.datatypes.network.PortDef
        required: false
      secure:
        type: boolean
        required: false
        default: false
      url_path:
        type: string
        required: false
      port_name:
        type: string
        required: false
      network_name:
        type: string
        required: false
        default: PRIVATE
      initiator:
        type: string
        required: false
        default: source
        constraints:
          - valid_values: [source, target, peer]
      ports:
        type: map
        required: false
        constraints:
          - min_length: 1
        entry_schema:
          type: tosca.datatypes.network.PortSpec
      ip_address:
        type: string
        default: 0.0.0.0/0

  tosca.capabilities.Endpoint.Admin:
    description: >
      This is the default TOSCA type that should be used or extended to define a specialized administrator endpoint
      capability.
    derived_from: tosca.capabilities.Endpoint
    properties:
      secure:
        type: boolean
        default: true
        required: false
        constraints:
          - equal: true

  tosca.capabilities.Endpoint.Public:
    description: >
      This capability represents a public endpoint which is accessible to the general internet (and its public IP address
      ranges).
    derived_from: tosca.capabilities.Endpoint
    properties:
      # Change the default network_name to use the first public network found
      network_name:
        type: string
        default: PUBLIC
        required: false
        constraints:
          - equal: PUBLIC
      floating:
        description: >
          Indicates that the public address should be allocated from a pool of
          floating IPs that are associated with the network.
        type: boolean
        default: false
        status: experimental
        required: false
      dns_name:
        description: The optional name to register with DNS
        type: string
        required: false
        status: experimental

  tosca.capabilities.Endpoint.Database:
    derived_from: tosca.capabilities.Endpoint

  tosca.capabilities.Attachment:
    description: >
      This is the default TOSCA type that should be used or extended to define an attachment capability of a (logical)
      infrastructure device node (e.g., BlockStorage node)
    derived_from: tosca.capabilities.Root

  tosca.capabilities.OperatingSystem:
    derived_from: tosca.capabilities.Root
    properties:
      architecture:
        required: false
        type: string
        description: >
          The host Operating System (OS) architecture.
      type:
        required: false
        type: string
        description: >
          The host Operating System (OS) type.
      distribution:
        required: false
        type: string
        description: >
          The host Operating System (OS) distribution. Examples of valid values
          for an “type” of “Linux” would include:
          debian, fedora, rhel and ubuntu.
      version:
        required: false
        type: version
        description: >
          The host Operating System version.
  tosca.capabilities.Scalable:
    derived_from: tosca.capabilities.Root
    properties:
      min_instances:
        type: integer
        required: true
        default: 1
        description: >
          This property is used to indicate the minimum number of instances
          that should be created for the associated TOSCA Node Template by
          a TOSCA orchestrator.
      max_instances:
        type: integer
        required: true
        default: 1
        description: >
          This property is used to indicate the maximum number of instances
          that should be created for the associated TOSCA Node Template by
          a TOSCA orchestrator.
      default_instances:
        type: integer
        required: false
        description: >
          An optional property that indicates the requested default number
          of instances that should be the starting number of instances a
          TOSCA orchestrator should attempt to allocate.
          The value for this property MUST be in the range between the values
          set for min_instances and max_instances properties.
  tosca.capabilities.network.Linkable:
    derived_from: tosca.capabilities.Node
    description: >
      A node type that includes the Linkable capability indicates that it can
      be pointed by tosca.relationships.network.LinksTo relationship type, which
      represents an association relationship between Port and Network node types.
  tosca.capabilities.network.Bindable:
    derived_from: tosca.capabilities.Node
    description: >
      A node type that includes the Bindable capability indicates that it can
      be pointed by tosca.relationships.network.BindsTo relationship type, which
      represents a network association relationship between Port and Compute node
      types.



interface_types:
  tosca.interfaces.Root:
    description: >
      The TOSCA root Interface Type all other TOSCA base Interface Types
      derive from
  tosca.interfaces.node.lifecycle.Standard:
    description: This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.
    derived_from: tosca.interfaces.Root
    preconfigure:
      description: Standard lifecycle preconfigure operation.
    create:
      description: Standard lifecycle create operation.
    configure:
      description: Standard lifecycle configure operation.
    start:
      description: Standard lifecycle start operation.
    stop:
      description: Standard lifecycle stop operation.
    delete:
      description: Standard lifecycle delete operation.

  tosca.interfaces.relationship.Configure:
    description: >
      The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may
      support.
    derived_from: tosca.interfaces.Root
    pre_configure_source:
      description: Operation to pre-configure the source endpoint.
    pre_configure_target:
      description: Operation to pre-configure the target endpoint.
    post_configure_source:
      description: Operation to post-configure the source endpoint.
    post_configure_target:
      description: Operation to post-configure the target endpoint.
    add_target:
      description: Operation to add a target node.
    remove_target:
      description: Operation to remove a target node.
    add_source:
      description: >
        Operation to notify the target node of a source node which
        is now available via a relationship.
    target_changed:
      description: >
        Operation to notify source some property or attribute of the
        target changed
  tosca.interfaces.node.Prepare:
    description: >
      The lifecycle interfaces define the essential, normative operations that must be executed before Node is created
    derived_from: tosca.interfaces.Root
    preconfigure:
      description: Operation to pre-configure the node.
    configure:
      description: Operation to configure the node.

relationship_types:
  tosca.relationships.Root:
    description: >
      The TOSCA root Relationship Type all other TOSCA base Relationship Types
      derive from.
    attributes:
      tosca_id:
        type: string
        required: true
      state:
        type: string
        required: false
    properties:
      tosca_name:
        type: string
        required: true
    interfaces:
      Configure:
        type: tosca.interfaces.relationship.Configure

  tosca.relationships.DependsOn:
    description: This type represents a general dependency relationship between two nodes.
    derived_from: tosca.relationships.Root
    valid_target_types: [ tosca.capabilities.Node ]

  tosca.relationships.HostedOn:
    description: This type represents a hosting relationship between two nodes.
    derived_from: tosca.relationships.Root
    valid_target_types: [ tosca.capabilities.Container ]

  tosca.relationships.ConnectsTo:
    description: This type represents a network connection relationship between two nodes.
    derived_from: tosca.relationships.Root
    valid_target_types: [ tosca.capabilities.Endpoint ]
    properties:
      credential:
        type: tosca.datatypes.Credential
        required: false

  tosca.relationships.AttachesTo:
    description: >
      This type represents an attachment relationship between two nodes. For example, an AttachesTo relationship
      type would be used for attaching a storage node to a Compute node.
    derived_from: tosca.relationships.Root
    valid_target_types: [ tosca.capabilities.Attachment ]
    properties:
      location:
        required: true
        type: string
        constraints:
          - min_length: 1
      device:
        required: false
        type: string

  tosca.relationships.RoutesTo:
    description: This type represents an intentional network routing between two Endpoints in different networks.
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ tosca.capabilities.Endpoint ]

  tosca.relationships.network.LinksTo:
    description: This relationship type represents an association relationship between Port and Network node types.
    derived_from: tosca.relationships.DependsOn
    valid_target_types: [ tosca.capabilities.network.Linkable ]

  tosca.relationships.network.BindsTo:
    description: This type represents a network association relationship between Port and Compute node types.
    derived_from: tosca.relationships.DependsOn
    valid_target_types: [ tosca.capabilities.network.Bindable ]
  MyAttachesTo:

    derived_from: tosca.relationships.AttachesTo

    properties:

      location:

        type: string

        default: /default_location



topology_template:

  inputs:

    cpus:

      type: integer

      description: Number of CPUs for the server.

      constraints:

        - valid_values: [ 1, 2, 4, 8 ]

    storage_size:

      type: scalar-unit.size

      default: 1 GB

      description: Size of the storage to be created.

    storage_snapshot_id:

      type: string

      description: >

        Optional identifier for an existing snapshot to use when creating storage.

    storage_location:

      type: string

      description: >

        Block storage mount point (filesystem path).



  node_templates:



    my_web_app_tier_1:

      type: tosca.nodes.Compute

      capabilities:

        host:

          properties:

            disk_size: 10 GB

            num_cpus: { get_input: cpus }

            mem_size: 4096 MB

        os:

          properties:

            architecture: x86_64

            type: Linux

            distribution: Fedora

            version: 18.0

      requirements:

        - local_storage:

            node: my_storage

            relationship: storage_attachesto_1



    my_web_app_tier_2:

      type: tosca.nodes.Compute

      capabilities:

        host:

          properties:

            disk_size: 10 GB

            num_cpus: { get_input: cpus }

            mem_size: 4096 MB

        os:

          properties:

            architecture: x86_64

            type: Linux

            distribution: Fedora

            version: 18.0

      requirements:

        - local_storage:

            node: my_storage

            relationship: storage_attachesto_2



    my_storage:

      type: tosca.nodes.BlockStorage

      properties:

        size: { get_input: storage_size }

        snapshot_id: { get_input: storage_snapshot_id }



  relationship_templates:

    storage_attachesto_1:

      type: MyAttachesTo

      properties:

        location: /my_data_location



    storage_attachesto_2:

      type: MyAttachesTo

      properties:

        location: /some_other_data_location

  outputs:

    private_ip_1:

      description: The private IP address of the application’s first tier.

      value: { get_attribute: [my_web_app_tier_1, private_address] }

    private_ip_2:

      description: The private IP address of the application’s second tier.

      value: { get_attribute: [my_web_app_tier_2, private_address] }

    volume_id:

      description: The volume id of the block storage instance.

      value: { get_attribute: [my_storage, volume_id] }